#!/usr/bin/env python3

from AutocatGenerator import AutocatGenerator
from AutocatGenSelector import AutocatGenSelector
from Chemistry.Exporters.TxtExporter import TxtExporter
from ChemToAutocat import ChemToAutocat
from DrawGraph import DrawGraph
from ServicesBuilder import ServicesBuilder

from argparse import ArgumentParser
from tempfile import gettempdir

import logging
import os
import sys
import traceback


def main():

    # root parser
    arg_parser = ArgumentParser(description="Suite of scripts to create and manage a CRS")
    arg_parser.add_argument(
        "-c", "--config", type=str,
        help="specify the config file absolute path",
        default="")
    arg_parser.add_argument("-v", "--verbose", action="store_true", help="enables verbose output")
    arg_parser.add_argument("--debug", action="store_true", help="enables debug logging in output")
    sub_parsers = arg_parser.add_subparsers(title="subcommands", dest="subparser_name", help="choose the function")

    # ChemToAutocat subparser
    sub_parser_CTA = sub_parsers.add_parser(
        "cta", description="Obtain an autocatalytic set from chemistry files", help="Chemistry To Autocatalytic set")

    # AutocatGenerator subparser
    sub_parser_AG = sub_parsers.add_parser(
        "ag", description="Generates a CRS with an autocatalytic set of reactions from a set of containers and food species",
        help="Autocatalytic set Generator")

    # AutocatGenSelector subparser
    sub_parser_AGS = sub_parsers.add_parser(
        "ags", description="Selects autocatalytic sets generated by the Autocatalytic set Generator, according to specific criteria", 
        help="Autocatalytic Generated set Selector")

    # Draw Graph subparser
    sub_parser_DG = sub_parsers.add_parser(
        "dg", description="Draw a graph from a CRS obtained from chemistry files", help="Draw chemistry graph")
    
    # parse the arguments
    args = arg_parser.parse_args()

    # set logs for the root logger
    # loggers instantiated in other modules of the suite will inherit from the root logger, configurations included
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)
    program_name = "crstools"
    logging_file_name = os.path.join(gettempdir(), f"{program_name+TxtExporter.get_timestamp()}.log")
    file_handler = logging.FileHandler(logging_file_name, 'w', 'utf-8')
    stdout_handler = logging.StreamHandler(sys.stdout)
    formatter = logging.Formatter(
        "[%(asctime)s] %(levelname)s [%(filename)s.%(funcName)s:%(lineno)d] %(message)s",
        datefmt="%a, %d %b %Y %H:%M:%S")
    file_handler.setFormatter(formatter)
    stdout_handler.setFormatter(formatter)
    stdout_level = logging.DEBUG if args.debug else logging.WARNING
    stdout_handler.setLevel(stdout_level)
    logger.addHandler(file_handler)
    logger.addHandler(stdout_handler)

    ## build services
    try:
        if args.config == "":
            builder = ServicesBuilder(args.subparser_name, args.verbose)
        else:
            builder = ServicesBuilder(args.subparser_name, args.verbose, args.config)
    except ValueError as err:
        traceback.print_exc()
        exit(1)

    ## start the requested function disambiguating subparser name
    exeOK = False
    match args.subparser_name:
        case "cta":
            exeOK = ChemToAutocat(builder)
        case "ag":
            exeOK = AutocatGenerator(builder)
        case "ags":
            exeOK = AutocatGenSelector(builder)
        case "dg":
            exeOK = DrawGraph(builder)
        case _:
            print("No subprogram selected")

    # close open files
    for handler in logger.handlers:
        handler.close()
    if not args.verbose:
        builder.verbose_output_file.close()
    
    print(f"Logs exported to {logging_file_name}")
    if exeOK:
        exit(0)
    else:
        print(f"An error occurred during execution of {args.subparser_name}", file=sys.stderr)
        exit(2)
    

if __name__ == "__main__":
    main()
